#############################
# Kafka basics
#############################
kafka.group.id=demo-consumer-009
kafka.bootstrap.servers=localhost:9092
kafka.client.id=demo-consumer
kafka.topic=test-topic
# Or, instead of kafka.topic, you can use:
#   kafka.topics=a,b,c
# or expansion:
#   kafka.topics.expand.prefix=foo-
#   kafka.topics.expand.count=12

#############################
# Kafka consumer behaviour
#############################
# If no committed offset exists, start from earliest
kafka.auto.offset.reset=earliest

# Max records returned in one poll (per consumer instance)
kafka.max.poll.records=100

# IMPORTANT: ensure (max.poll.records × processing_time_per_record) < max.poll.interval.ms
# Example: 100 records × 60s = ~100 min worst case ? set 2h = 7,200,000 ms
kafka.max.poll.interval.ms=7200000

# Cooperative rebalancing strategy
kafka.partition.assignment.strategy=org.apache.kafka.clients.consumer.CooperativeStickyAssignor

# Keep heartbeat small so liveness is detected promptly
session.timeout.ms=45000
heartbeat.interval.ms=15000

#############################
# Worker behaviour (broker-agnostic)
#############################
# Poll timeout (ms) ? how long to wait in poll() if no records available
worker.poll.ms=500

# Commit cadence (ms) ? how often offsets are committed
worker.commit.tick.ms=2000

# Runner buffer capacity ? how many messages per partition to prefetch
# Should be at least 2*kafka.max.poll.record to allow for continuous polling
worker.buffer.capacity=10000

# Seek behaviour: "beginning" = reset to earliest once, "committed" = continue from committed offsets
worker.seek=beginning

#############################
# State
#############################
state.dir=state
# DBs will live under: <stateDir>/<groupId>/<topic>/partition-<n>/

#############################
# Simulated processing
#############################
# How long each record "work" should take (ms)
# e.g. 1000 ms (1s); try 60000 for 1 min
simulated.processor.delay.ms=100

#############################
# Metrics
#############################
metrics.print.ms=2000
metrics.full.every=10
