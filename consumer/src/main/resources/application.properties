#############################
# Kafka basics
#############################
kafka.bootstrap.servers=localhost:9092
kafka.group.id=demo-consumer
kafka.client.id=demo-consumer
kafka.topic=test-topic
# Or, instead of kafka.topic, you can use:
#   kafka.topics=a,b,c
# or expansion:
#   kafka.topics.expand.prefix=foo-
#   kafka.topics.expand.count=12

#############################
# Consumer behaviour
#############################
kafka.auto.offset.reset=earliest

# Batch size: gives some throughput even with slower records
kafka.max.poll.records=100

# IMPORTANT: ensure (max.poll.records × processing_time_per_record) < max.poll.interval.ms
# With 100 records × 60s = ~100 min worst case, set 2h = 7,200,000 ms
kafka.max.poll.interval.ms=7200000

# How long poll() will block waiting for records if none available
consumer.poll.ms=500

# Cooperative rebalancing
kafka.partition.assignment.strategy=org.apache.kafka.clients.consumer.CooperativeStickyAssignor

# Start from earliest offsets on first assignment (ignores committed offsets)
consumer.from.beginning=true

# Keep heartbeat small so liveness is detected promptly
session.timeout.ms=45000
heartbeat.interval.ms=15000

# Other tuning knobs (uncomment if needed)
# kafka.session.timeout.ms=15000
# kafka.fetch.min.bytes=1
# kafka.fetch.max.wait.ms=500

#############################
# State
#############################
state.dir=state
# DBs will live under: <stateDir>/<groupId>/<topic>/partition-<n>/

#############################
# Metrics
#############################
metrics.tick.ms=2000

#############################
# Simulated processing
#############################
# How long each record "work" should take
# e.g. 1000 ms (1s); try 60000 for 1 min
processor.delay.ms=1000
